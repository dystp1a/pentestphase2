from pwn import *
import codecs
io = process('./script')
context.log_level = 'DEBUG'

def decode_decimal(encoded_str):
    return ''.join(chr(int(x)) for x in encoded_str.split())

def decode_rot13(encoded_str):
    return codecs.decode(encoded_str, 'rot_13')

def decode_base64(encoded_str):
    return base64.b64decode(encoded_str).decode('utf-8')

def decode_octal(encoded_str):
    return ''.join(chr(int(x, 8)) for x in encoded_str.split())

def decode_hex(encoded_str):
    try:
        return bytes.fromhex(encoded_str.replace("0x", "").replace(" ", "")).decode('utf-8')
    except ValueError:
        return "Invalid Hex String"


def caeser_decipher(a):
    values=a.split(" ")
    caeser=values[0]
    key=int(values[-1])
    result = ""

    for char in caeser:
        if char.isalpha():
            base_ord = ord('a') if char.islower() else ord('A')
            result += chr((ord(char) - base_ord - key) % 26 + base_ord)
        else:
            result += char

    return result
    
    
def spclencryption(a):
    alphabets = { 'A': "@!@@!", 'B': "@!@@@", 'C': "@@!!!", 'D': "@@!!@", 'E': "!!!!!", 'F': "!!!!@", 'G': "!!!@!", 'H': "!!!@@", 'I': "!!@!!", 'J': "!!@!@", 'K': "!!@@!", 'L': "!!@@@", 'M': "!@!!!", 'N': "!@!!@", 'O': "!@!@!", 'P': "!@!@@", 'Q': "!@@!!", 'R': "!@@!@", 'S': "!@@@!", 'T': "!@@@@", 'U': "@!!!!", 'V': "@!!!@", 'W': "@!!@!", 'X': "@!!@@", 'Y': "@!@!!", 'Z': "@!@!@", }
    
    values2chk=a.split()
    result=""

    for i in values2chk:
        for key, value in alphabets.items():
                if value == i:
                    result+=key
    return result  
    

while True:
    prompt = io.recvuntil([b"encoded string:", b"caeser", b"custom",b"Decrypt this:"]) 
    if not prompt:
        break

    ToDecode = io.recvline().decode().strip()

    if b"decimal" in prompt:
        decoded_str = decode_decimal(ToDecode)
    elif b"rot" in prompt:
        decoded_str = decode_rot13(ToDecode)
    elif b"base64" in prompt:
        decoded_str = decode_base64(ToDecode)
    elif b"octal" in prompt:
        decoded_str = decode_octal(ToDecode)
    elif b"hex" in prompt:
        decoded_str = decode_hex(ToDecode)
    elif b"caeser" in prompt:
        decoded_str = caeser_decipher(ToDecode)
    elif b"Decrypt this:" in prompt:
        decoded_str= spclencryption(ToDecode)
    else:
        decoded_str = "HELLO"
    print(f"Decoded String: {decoded_str}")
    io.sendline(decoded_str)
    
io.interactive()

io.close()
